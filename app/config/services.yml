# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
parameters:
#    parameter_name: value

services:
    library.add_book_handler:
        class: BookLibrary\Application\AddBookCommandHandler
        arguments:
            - '@library.book_inventory'
        tags:
            - { name: command_handler, handles: BookLibrary\Application\AddBookCommand }
    library.lend_book_handler:
        class: BookLibrary\Application\LendBookCommandHandler
        arguments:
            - '@library.book_inventory'
        tags:
            - { name: command_handler, handles: BookLibrary\Application\LendBookCommand }
    library.return_book_handler:
        class: BookLibrary\Application\ReturnBookCommandHandler
        arguments:
            - '@library.book_inventory'
        tags:
            - { name: command_handler, handles: BookLibrary\Application\ReturnBookCommand }
    library.extend_book_handler:
        class: BookLibrary\Application\ExtendBookCommandHandler
        arguments:
            - '@library.book_inventory'
        tags:
            - { name: command_handler, handles: BookLibrary\Application\ExtendBookCommand }
    library.book_inventory:
        class: BookLibrary\Domain\EventSourcedBookInventory
        arguments: ["@library.event_sourcing.event_sourced_repository"]
    library.projections.available_books:
        class: BookLibrary\Projections\AvailableBooksProjection
        arguments: ["@doctrine.orm.default_entity_manager"]
        tags:
            - { name: event_subscriber, subscribes_to: BookLibrary\Domain\BookAddedEvent, method: handleNewBook }
            - { name: event_subscriber, subscribes_to: BookLibrary\Domain\BookLentEvent, method: handleLent }
            - { name: event_subscriber, subscribes_to: BookLibrary\Domain\BookReturnedEvent, method: handleReturned }
    library.event_sourcing.event_sourced_repository:
        class: EventSourcing\EventSourcedRepository
        arguments: ["@library.event_sourcing.event_store", "@event_bus"]
    library.event_sourcing.event_store:
        class: Infrastructure\EventStore\Doctrine\DoctrineEventStore
        arguments: ["@doctrine.orm.default_entity_manager"]

#    service_name:
#        class: AppBundle\Directory\ClassName
#        arguments: ["@another_service_name", "plain_value", "%parameter_name%"]
